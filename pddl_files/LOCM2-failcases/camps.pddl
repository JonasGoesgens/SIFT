
(define (domain camps)
(:requirements :negative-preconditions :equality :strips)
(:predicates (at ?x)
             (fuel ?x)
             (wood ?x)
             (coal ?x))

(:action move
:parameters (?from ?to)
:precondition (and (at ?from) 
                   (not (at ?to))
                   (not (= ?from ?to)))
:effect  (and (at ?to) 
              (not (at ?from)))
 )
(:action find-coal
:parameters (?this)
:precondition (and (at ?this) 
                   (not (coal ?this))
                   (not (fuel ?this)))
:effect  (and (coal ?this)
              (fuel ?this))
 )
(:action find-wood
:parameters (?this)
:precondition (and (at ?this) 
                   (not (wood ?this))
                   (not (fuel ?this)))
:effect  (and (wood ?this)
              (fuel ?this))
 )
(:action draw-coal
:parameters (?this)
:precondition (and (at ?this) 
                   (coal ?this)
                   (fuel ?this))
:effect  (and (not (coal ?this))
              (not (fuel ?this)))
 )
(:action carve-wood
:parameters (?this)
:precondition (and (at ?this) 
                   (wood ?this)
                   (fuel ?this))
:effect  (and (not (wood ?this))
              (not (fuel ?this)))
 )
(:action burn-fuel
:parameters (?this)
:precondition (and (at ?this)
                   (fuel ?this))
:effect  (and (not (fuel ?this)))
 )) 
